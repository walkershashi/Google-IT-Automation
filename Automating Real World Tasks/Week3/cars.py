#!/usr/bin/env python3

import json
import os
import locale
import sys
import reports
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {'max_sales': 0} # to calculate max sales
  car_year_cnt = {} # to calculate car in each year
  
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue # Adds revenue field to each items of the json file
      max_revenue = item 
    # TODO: also handle max sales
    if item['total_sales'] > max_sales['max_sales']:
      item['max_sales'] = item['total_sales']
      max_sales = item
    # TODO: also handle most popular car_year
    if item['car']['car_year'] not in car_year_cnt:
      car_year_cnt[item['car']['car_year']] = item['total_sales']
    else:
      car_year_cnt[item['car']['car_year']] += item['total_sales']
  
  # Sort the car_year_cnt on the basis of cnt
  car_year_cnt = sorted(car_year_cnt.items(), key = lambda x: x[1], reverse=True)
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sales['car']), max_sales['max_sales']),
    "The most popular year was {} with {} sales.".format(car_year_cnt[0][0], car_year_cnt[0][1])
]
  
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  # For optional part we need to sort the data by total sales
  """car_data = sorted(car_data.items(), key=lambda x: x[1])
  print(car_data)"""
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)

  # TODO: turn this into a PDF report
  reports.generate('cars.pdf', 'Car Sales Report', 'Detailed Analysis of Car sales and generation of insights<br/><br/>{}<br/>{}<br/>{}<br/>'.format(summary[0], summary[1], summary[2]), cars_dict_to_table(data))

  # TODO: send the PDF report as an email attachment
  # Generate Email
  sender = 'automation@example.com'
  receiver = '{}@example.com'.format(os.environ.get('USER'))
  subject = 'Sales summary for last month'
  body = "Detailed Analysis of Car sales and generation of insights'\n'{}'\n'{}'\n'{}'\n'".format(summary[0], summary[1], summary[2])
  attachment_path = 'cars.pdf'
  message = emails.generate(sender, receiver, subject, body, attachment_path)

  # Send Email
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)

